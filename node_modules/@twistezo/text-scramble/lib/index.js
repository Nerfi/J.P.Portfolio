"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Text scramble effect
 *
 * @param {string} domClass - DOM class to inject
 * @param {String[]} sentences - Array of sentences
 * @param {number} symbolChangeTime - Time to switch next random symbol [ms]
 * @param {number} oneLetterTime - Time to finish letter [ms]
 * @param {number} nextDelay - Delay beofre start new sentence [ms]
 */
var TextScramble = /*#__PURE__*/function () {
  function TextScramble(domClass, sentences, symbolChangeTime, oneLetterTime, nextDelay) {
    var _this = this;

    _classCallCheck(this, TextScramble);

    _defineProperty(this, "_fillSpanWithSymbol", function (childs) {
      if (childs.length > 0) _this._randomArrayItem(childs).innerText = _this._randomArrayItem(_this._symbols);
    });

    _defineProperty(this, "_randomArrayItem", function (array) {
      return array[Math.floor(Math.random() * array.length)];
    });

    _defineProperty(this, "_nextArrayElementInLoop", function (array, currentIndex) {
      var bound = array.length;
      var nextIndex = (currentIndex + bound + bound + 1) % bound;
      return array[nextIndex];
    });

    _defineProperty(this, "_delay", function (ms) {
      return new Promise(function (res) {
        return setTimeout(res, ms);
      });
    });

    this._symbols = '!<>-_\\/[]{}â€”=+*^?#';
    this._domClass = domClass;
    this._sentences = sentences;
    this._symbolChangeTime = symbolChangeTime;
    this._oneLetterTime = oneLetterTime;
    this._nextDelay = nextDelay;

    this._infiniteIterOverTexts();
  }

  _createClass(TextScramble, [{
    key: "_infiniteIterOverTexts",
    value: function () {
      var _infiniteIterOverTexts2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var el, currentTextIndex, text, childs;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                el = document.querySelector('.' + this._domClass);
                currentTextIndex = 0; // eslint-disable-next-line no-constant-condition

              case 2:
                if (!true) {
                  _context.next = 13;
                  break;
                }

                text = this._nextArrayElementInLoop(this._sentences, currentTextIndex);
                currentTextIndex = this._sentences.indexOf(text);
                text.split('').forEach(function () {
                  var child = document.createElement('span');
                  el.appendChild(child);
                });
                childs = _toConsumableArray(document.querySelectorAll('.' + this._domClass + ' > span'));

                this._drawSentence(text, childs, this._symbolChangeTime, this._oneLetterTime);

                _context.next = 10;
                return this._delay(childs.length * this._oneLetterTime + this._nextDelay);

              case 10:
                while (el.firstChild) {
                  el.removeChild(el.firstChild);
                }

                _context.next = 2;
                break;

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _infiniteIterOverTexts() {
        return _infiniteIterOverTexts2.apply(this, arguments);
      }

      return _infiniteIterOverTexts;
    }()
    /**
     * Get all previously generated spans as `childs`. Every child is a one letter.
     * Run `drawInterval` which fills every child with a random symbol.
     * After some time interval first letter is replaced by finish letter and removed from `childs`.
     * If all letters are replaced and `childs` array is empty, all intervals are stoped.
     *
     * @param {string} text
     * @param {Array} childs
     */

  }, {
    key: "_drawSentence",
    value: function _drawSentence(text, childs) {
      var _this2 = this;

      var currentLetter = 0;
      this._drawInterval = setInterval(function () {
        _this2._fillSpanWithSymbol(childs, text);
      }, this._symbolChangeTime);
      var removeFirstLetterInterval = setInterval(function () {
        childs[0].innerHTML = text[currentLetter];
        currentLetter += 1;
        childs.shift();

        if (childs.length === 0) {
          clearInterval(_this2._drawInterval);
          clearInterval(removeFirstLetterInterval);
        }
      }, this._oneLetterTime);
    }
  }]);

  return TextScramble;
}();

var _default = TextScramble;
exports["default"] = _default;